/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ClientMonitoring;

import Configs.ActionName;
import Configs.FileStructure;
import Configs.ServerRequestPackage;
import Configs.ShippingData;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.net.UnknownHostException;
import java.nio.file.FileSystems;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.StandardWatchEventKinds;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.nio.file.attribute.BasicFileAttributes;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bin
 */
public class ClientScreen extends javax.swing.JFrame implements Runnable {

    private String IP;
    private ServerScreen server;
    private Socket clientSocket;
    private ObjectInputStream ois;
    private ObjectOutputStream oos;
    private Thread threadReceive;
    private FileStructure fileStructure;
    private WatchService watchService;
    private String pathToWatching;
    private Path path;
    private File fileWatch;
    private HashMap<WatchKey, Path> watchKeyContainer;
    private DefaultTableModel tableModel;
    private int counter = 1;
    

    /**
     * Creates new form ClientScreen
     */
    public ClientScreen() {
        try {
            initComponents();
            bootstrap();
        } catch (IOException ex) {
            Logger.getLogger(ClientScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void bootstrap() throws IOException {
        try {
            // Init Client IP
            this.IP = InetAddress.getLocalHost().getHostAddress();
            ClientIPLabel.setText(ClientIPLabel.getText() + " " + this.IP);

            // Create Server Instance
            this.server = new ServerScreen();

            // Create File structure
            pathToWatching = System.getProperty("user.dir");

            fileStructure = new FileStructure(new File(System.getProperty("user.home")));
            path = Paths.get(pathToWatching);
            fileWatch = new File(pathToWatching);

            watchKeyContainer = new HashMap<WatchKey, Path>();
            
            // Table
            String[] header = new String[]{"STT", "Action", "Change Time", "Description"};
            this.tableModel = new DefaultTableModel();
            this.tableModel.setColumnIdentifiers(header);
            ChangeFolderTable.setModel(this.tableModel);

            // Watch Service
            watchService = FileSystems.getDefault().newWatchService();
        } catch (UnknownHostException ex) {
            Logger.getLogger(ClientScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        ClientIPLabel = new javax.swing.JLabel();
        ClientInformationTitle = new javax.swing.JLabel();
        ClientPortLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        ServerIPText = new javax.swing.JLabel();
        ServerIPTextInput = new javax.swing.JTextField();
        ServerIPText1 = new javax.swing.JLabel();
        ServerPortTextInput = new javax.swing.JTextField();
        ConnectServerButton = new javax.swing.JButton();
        ConnectServerStatusText = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ChangeFolderTable = new javax.swing.JTable();
        DisconnectButton = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ClientIPLabel.setText("Your IP:");

        ClientInformationTitle.setText("Client Information");

        jLabel1.setText("Connect to Server");

        ServerIPText.setText("IP");

        ServerIPTextInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ServerIPTextInputActionPerformed(evt);
            }
        });

        ServerIPText1.setText("Port");

        ServerPortTextInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ServerPortTextInputActionPerformed(evt);
            }
        });

        ConnectServerButton.setText("Connect");
        ConnectServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectServerButtonActionPerformed(evt);
            }
        });

        ChangeFolderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "STT", "Action", "Change Time", "Description"
            }
        ));
        jScrollPane2.setViewportView(ChangeFolderTable);

        DisconnectButton.setText("Disconnect");
        DisconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisconnectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ClientPortLabel)
                            .addComponent(ClientInformationTitle)
                            .addComponent(ClientIPLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(ServerPortTextInput, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(jLabel1))
                            .addComponent(ServerIPText, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ServerIPText1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ServerIPTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(ConnectServerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DisconnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ConnectServerStatusText))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(36, 36, 36)
                        .addComponent(ServerIPText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ServerIPTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ServerIPText1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ServerPortTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ClientInformationTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ClientIPLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClientPortLabel)
                        .addGap(53, 53, 53)
                        .addComponent(ConnectServerStatusText)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConnectServerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DisconnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ServerPortTextInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ServerPortTextInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ServerPortTextInputActionPerformed

    private void ServerIPTextInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ServerIPTextInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ServerIPTextInputActionPerformed

    private void ConnectServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectServerButtonActionPerformed
        String serverIPInput = ServerIPTextInput.getText().trim();
        String serverPortInput = ServerPortTextInput.getText().trim();
        int parsedPortInput = Integer.parseInt(serverPortInput);
        boolean isCorrectServerConfigs
                = serverIPInput.equals(server.getIP()) && parsedPortInput == server.getPort();

        if (isCorrectServerConfigs) {
            try {
                this.connectToServer(this.IP, parsedPortInput);
                this.receiveConnectStatusFromServer();

            } catch (IOException ex) {
                Logger.getLogger(ClientScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ConnectServerButtonActionPerformed

    private void DisconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisconnectButtonActionPerformed
        try {
            this.threadReceive.interrupt();
            
            this.oos = null;
            this.ois = null;
            ConnectServerButton.setEnabled(true);
            DisconnectButton.setEnabled(false);
            this.sendData(ActionName.Leave, "");
        } catch (IOException ex) {
            Logger.getLogger(ClientScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DisconnectButtonActionPerformed

    private void registerWatchingFolder(Path path) {
        try {
            WatchKey keyRegisted = path.register(this.watchService,
                    StandardWatchEventKinds.ENTRY_CREATE,
                        StandardWatchEventKinds.ENTRY_MODIFY,
                            StandardWatchEventKinds.ENTRY_DELETE);

            watchKeyContainer.put(keyRegisted, path);
        } catch (IOException ex) {
            Logger.getLogger(ClientScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void listenFileFolderChanges() throws IOException {
        Thread runner = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    WatchService watcher = FileSystems.getDefault().newWatchService();
                    Path dir = Paths.get(System.getProperty("user.dir"));
                    dir.register(watcher, StandardWatchEventKinds.ENTRY_CREATE, StandardWatchEventKinds.ENTRY_DELETE,
                            StandardWatchEventKinds.ENTRY_MODIFY);

                    System.out.println("Watch Service registered for dir: " + dir.getFileName());

                    WatchKey key = null;
                    while (true) {
                        try {
                            key = watcher.take();
                        } catch (InterruptedException ex) {
                            System.out.println("InterruptedException: " + ex.getMessage());
                            return;
                        }

                        for (WatchEvent<?> event : key.pollEvents()) {
                            // Retrieve the type of event by using the kind() method.
                            WatchEvent.Kind<?> kind = event.kind();
                            WatchEvent<Path> ev = (WatchEvent<Path>) event;
                            Path fileName = ev.context();
                            
                            if (kind == StandardWatchEventKinds.ENTRY_CREATE) {
                                System.out.println("Create");
                                sendData(ActionName.Create, "A new file " + fileName.getFileName() + " was created: ");
                                writeChangeToTable(ActionName.Create, "A new file " + fileName.getFileName() + " was created: ");
                            } else if (kind == StandardWatchEventKinds.ENTRY_MODIFY) {
                                System.out.println("Modify");

                                sendData(ActionName.Modify, "A new file " + fileName.getFileName() + " was modified: ");
                                writeChangeToTable(ActionName.Modify, "A new file " + fileName.getFileName() + " was modified: ");
                            } else if (kind == StandardWatchEventKinds.ENTRY_DELETE) {
                                System.out.println("Delete");

                                sendData(ActionName.Delete, "A new file " + fileName.getFileName() + " was deleted: " );
                                writeChangeToTable(ActionName.Delete, "A new file " + fileName.getFileName() + " was deleted: " );
                            }
                        }
                        boolean valid = key.reset();
                        if (!valid) {
                            break;
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(ClientScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        runner.start();
    }
    
    private void connectToServer(String IP, int port) {
        try {
            this.clientSocket = new Socket(IP, port);

            ShippingData data = new ShippingData(IP, ActionName.Register, LocalDateTime.now(), this.pathToWatching, this.fileStructure, "");

            this.sendConnectionDataToServer(data);
        } catch (IOException ex) {
            Logger.getLogger(ClientScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void writeChangeToTable(String action, String description) {
        this.tableModel.addRow(new Object[] { counter++, action, LocalDateTime.now(), description});
        this.tableModel.fireTableDataChanged();
    }
    
    private void receiveConnectStatusFromServer() throws IOException {
        if (ois == null) {
            ois = new ObjectInputStream(this.clientSocket.getInputStream());
        }

        this.threadReceive = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        ServerRequestPackage serverAction = (ServerRequestPackage) ois.readObject();
                        String command = serverAction.getAction();

                        switch (command) {
                            case ActionName.ServerAccepted: {
                                ConnectServerStatusText.setText("You have connected to Server");
                                listenFileFolderChanges();
                                break;
                            }
                            case ActionName.ServerStopped: {
                                ConnectServerStatusText.setText("This server has been stopped");
                                break;
                            }
                        }

                    } catch (IOException ex) {
                        Logger.getLogger(ClientScreen.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(ClientScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });

        this.threadReceive.start();
    }
    
    private void sendData(String action, String description) throws IOException {
        if (oos == null) {
            oos = new ObjectOutputStream(this.clientSocket.getOutputStream());
        }
        
        ShippingData data = new ShippingData(this.IP, action, LocalDateTime.now(), null, null, description);
        
        System.out.println("data: " + data);
        oos.writeObject(data);
    }

    private void sendConnectionDataToServer(ShippingData data) throws IOException {

        if (oos == null) {
            oos = new ObjectOutputStream(this.clientSocket.getOutputStream());
        }

        oos.writeObject(data);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ChangeFolderTable;
    private javax.swing.JLabel ClientIPLabel;
    private javax.swing.JLabel ClientInformationTitle;
    private javax.swing.JLabel ClientPortLabel;
    private javax.swing.JButton ConnectServerButton;
    private javax.swing.JLabel ConnectServerStatusText;
    private javax.swing.JButton DisconnectButton;
    private javax.swing.JLabel ServerIPText;
    private javax.swing.JLabel ServerIPText1;
    private javax.swing.JTextField ServerIPTextInput;
    private javax.swing.JTextField ServerPortTextInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
